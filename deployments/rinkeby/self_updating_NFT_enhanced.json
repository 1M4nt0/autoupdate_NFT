{
  "address": "0x95d2B072640Ad397A3e022E88Ee52982E40feE03",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4b266c6c44e9109b37ad16114f1b62e2aed099553ca2292f917d01fe6b3f02e0",
  "receipt": {
    "to": null,
    "from": "0x495f972aa8563Deb50AD81DfFA909f7aF8aB7F10",
    "contractAddress": "0x95d2B072640Ad397A3e022E88Ee52982E40feE03",
    "transactionIndex": 25,
    "gasUsed": "6660264",
    "logsBloom": "0x
    "blockHash": "0x0409ad39fac9598828d944df166c01d16e8b063dc3b3aafd32a6298be7bf7a48",
    "transactionHash": "0x4b266c6c44e9109b37ad16114f1b62e2aed099553ca2292f917d01fe6b3f02e0",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 10243023,
        "transactionHash": "0x4b266c6c44e9109b37ad16114f1b62e2aed099553ca2292f917d01fe6b3f02e0",
        "address": "0x95d2B072640Ad397A3e022E88Ee52982E40feE03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000495f972aa8563deb50ad81dffa909f7af8ab7f10"
        ],
        "data": "0x",
        "logIndex": 84,
        "blockHash": "0x0409ad39fac9598828d944df166c01d16e8b063dc3b3aafd32a6298be7bf7a48"
      },
      {
        "transactionIndex": 25,
        "blockNumber": 10243023,
        "transactionHash": "0x4b266c6c44e9109b37ad16114f1b62e2aed099553ca2292f917d01fe6b3f02e0",
        "address": "0x95d2B072640Ad397A3e022E88Ee52982E40feE03",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000495f972aa8563deb50ad81dffa909f7af8ab7f10",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 85,
        "blockHash": "0x0409ad39fac9598828d944df166c01d16e8b063dc3b3aafd32a6298be7bf7a48"
      }
    ],
    "blockNumber": 10243023,
    "cumulativeGasUsed": "10787235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f9958e105afcba700bac21e6acb357f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/self_updating_NFT_enhanced.sol\":\"self_updating_NFT_enhanced\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/self_updating_NFT_enhanced.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"base64-sol/base64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\ncontract self_updating_NFT_enhanced is ERC721URIStorage, Ownable {\\r\\n\\r\\n\\tstruct Color {\\r\\n\\t\\tuint red;\\r\\n\\t\\tuint green;\\r\\n\\t\\tuint blue;\\r\\n\\t}\\r\\n\\r\\n\\tColor[] private colors;\\r\\n\\tuint256 private numberOfMeshes = 12;\\r\\n\\r\\n\\tconstructor() ERC721(\\\"TEST\\\", \\\"TESTNFT\\\") {\\r\\n\\t\\tcolors.push(Color(23, 18, 25)); \\t\\t// Blue\\r\\n\\t\\tcolors.push(Color(34, 85, 96)); \\t\\t// Light Blue\\r\\n\\t\\tcolors.push(Color(237, 240, 96)); \\t\\t// Yellow\\r\\n\\t\\tcolors.push(Color(240, 128, 60)); \\t\\t// Orange\\r\\n\\t\\tcolors.push(Color(49, 13, 32)); \\t\\t// Bordeaux\\r\\n\\t\\tcreate();\\r\\n    }\\r\\n\\r\\n\\tfunction generateNewSvgURI() internal view returns (string memory) {\\r\\n\\t\\tuint256 ownerUint = uint256(uint160(address(ownerOf(0))));\\r\\n\\t\\tbytes memory updatedContent = abi.encodePacked(getNextMesh(ownerUint));\\r\\n\\t\\tfor(uint i = 1; i < numberOfMeshes; i++){\\r\\n\\t\\t\\tuint256 randomNumber = uint256(keccak256(abi.encode(ownerUint, i)));\\r\\n\\t\\t\\tupdatedContent = abi.encodePacked(updatedContent, getNextMesh(randomNumber));\\r\\n\\t\\t}\\r\\n\\t\\tstring memory fullRawURI = getFullSVGImage(string(updatedContent));\\r\\n\\t\\tstring memory imageURI = svgToImageURI(fullRawURI);\\r\\n\\t\\treturn formatTokenURI(imageURI);\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction _afterTokenTransfer(address, address, uint256) internal override {\\r\\n\\t\\t_setTokenURI(0, generateNewSvgURI());\\r\\n\\t}\\r\\n\\r\\n\\tfunction getNextMesh(uint256 _randomNumber) internal view returns (string memory) {\\r\\n\\t\\tuint256 m_xPos = (uint256(keccak256(abi.encode(_randomNumber, 1252312335))) % 700);\\r\\n\\t\\tuint256 m_yPos = (uint256(keccak256(abi.encode(_randomNumber, 25123132))) % 700);\\r\\n\\t\\tuint256 m_height = (uint256(keccak256(abi.encode(_randomNumber, 336235235))) % 500) + 50;\\r\\n\\t\\tuint256 m_width = (uint256(keccak256(abi.encode(_randomNumber, 52351234))) % 500) + 50;\\r\\n\\t\\tColor memory m_color = colors[uint256(keccak256(abi.encode(_randomNumber, 23542345))) % 5];\\r\\n\\r\\n\\t\\treturn string(abi.encodePacked(\\r\\n\\t\\t\\t'<rect x=\\\"',\\r\\n\\t\\t\\tStrings.toString(m_xPos),\\r\\n\\t\\t\\t'\\\" y=\\\"',\\r\\n\\t\\t\\tStrings.toString(m_yPos),\\r\\n\\t\\t\\t'\\\" width=\\\"',\\r\\n\\t\\t\\tStrings.toString(m_width),\\r\\n\\t\\t\\t'\\\" height=\\\"',\\r\\n\\t\\t\\tStrings.toString(m_height),\\r\\n\\t\\t\\t'\\\" fill=\\\"rgba(',\\r\\n\\t\\t\\tStrings.toString(m_color.red),\\r\\n\\t\\t\\t',',\\r\\n\\t\\t\\tStrings.toString(m_color.green),\\r\\n\\t\\t\\t',',\\r\\n\\t\\t\\tStrings.toString(m_color.blue),\\r\\n\\t\\t\\t',0.4)\\\" />'\\r\\n\\t\\t));\\r\\n\\t}\\r\\n\\r\\n\\tfunction getFullSVGImage(string memory content) internal pure returns (string memory) {\\r\\n\\t\\tstring memory baseSVGMarkdown = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" style=\\\"background-color:white\\\" width=\\\"1000\\\" height=\\\"1000\\\">';\\r\\n\\t\\treturn string(abi.encodePacked(baseSVGMarkdown, content, '</svg>'));\\r\\n\\t}\\r\\n\\r\\n\\tfunction create() internal {\\r\\n\\t\\t_safeMint(msg.sender, 0);\\r\\n\\t\\tstring memory imageURI = generateNewSvgURI();\\r\\n\\t\\t_setTokenURI(0, imageURI);\\r\\n\\t}\\r\\n\\r\\n\\tfunction svgToImageURI(string memory _svg) internal pure returns (string memory){\\r\\n\\t\\tstring memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\r\\n\\t\\tstring memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(_svg))));\\r\\n\\t\\treturn string(abi.encodePacked(baseURL,svgBase64Encoded));\\r\\n\\t}\\r\\n\\r\\n\\tfunction formatTokenURI(string memory _imageURI) internal pure returns (string memory) {\\r\\n\\t\\tstring memory baseURL = \\\"data:application/json;base64,\\\";\\r\\n\\t\\treturn string(abi.encodePacked(\\r\\n\\t\\t\\tbaseURL,\\r\\n\\t\\t\\tBase64.encode(\\r\\n\\t\\t\\t\\tbytes(abi.encodePacked(\\r\\n\\t\\t\\t\\t\\t'{\\\"name\\\":\\\"The soul of wallets\\\", ', \\r\\n\\t\\t\\t\\t\\t'\\\"description\\\": \\\"The image of this NFT varies according to the soul of your wallet\\\", ', \\r\\n\\t\\t\\t\\t\\t'\\\"attributes\\\": \\\"\\\", ', \\r\\n\\t\\t\\t\\t\\t'\\\"image\\\": \\\"', _imageURI, '\\\"}'\\r\\n\\t\\t\\t\\t))\\r\\n\\t\\t)));\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0x1194ceddbe8be9f502ba0541248fc347b3d5a1a863f79d3fe0ae81a02207d026\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600c6009553480156200001657600080fd5b506040518060400160405280600481526020017f54455354000000000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f544553544e46540000000000000000000000000000000000000000000000000081525081600090805190602001906200009b9291906200133a565b508060019080519060200190620000b49291906200133a565b505050620000d7620000cb620002fa60201b60201c565b6200030260201b60201c565b6008604051806060016040528060178152602001601281526020016019815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101556040820151816002015550506008604051806060016040528060228152602001605581526020016060815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101556040820151816002015550506008604051806060016040528060ed815260200160f081526020016060815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101556040820151816002015550506008604051806060016040528060f0815260200160808152602001603c815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000155602082015181600101556040820151816002015550506008604051806060016040528060318152602001600d8152602001602081525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050620002f4620003c860201b60201c565b62002397565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b620003db3360006200040560201b60201c565b6000620003ed6200042b60201b60201c565b9050620004026000826200056560201b60201c565b50565b62000427828260405180602001604052806000815250620005e660201b60201c565b5050565b606060006200044160006200065460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16905060006200046c826200070960201b60201c565b6040516020016200047e919062001839565b60405160208183030381529060405290506000600190505b600954811015620005205760008382604051602001620004b892919062001bc3565b6040516020818303038152906040528051906020012060001c905082620004e5826200070960201b60201c565b604051602001620004f892919062001811565b6040516020818303038152906040529250508080620005179062001eb9565b91505062000496565b5060006200053482620009c960201b60201c565b90506000620005498262000a1560201b60201c565b90506200055c8162000ab960201b60201c565b94505050505090565b620005768262000b5760201b60201c565b620005b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005af9062001a9e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190620005e19291906200133a565b505050565b620005f8838362000bc360201b60201c565b6200060d600084848462000dbd60201b60201c565b6200064f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006469062001a38565b60405180910390fd5b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000700576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006f79062001a7c565b60405180910390fd5b80915050919050565b606060006102bc83634aa4c50f6040516020016200072992919062001ae2565b6040516020818303038152906040528051906020012060001c6200074e919062001f07565b905060006102bc8463017f593c6040516020016200076e92919062001b3c565b6040516020818303038152906040528051906020012060001c62000793919062001f07565b9050600060326101f48663140a8ae3604051602001620007b592919062001b69565b6040516020818303038152906040528051906020012060001c620007da919062001f07565b620007e6919062001c3e565b9050600060326101f48763031ed1026040516020016200080892919062001b96565b6040516020818303038152906040528051906020012060001c6200082d919062001f07565b62000839919062001c3e565b9050600060086005886301673a496040516020016200085a92919062001b0f565b6040516020818303038152906040528051906020012060001c6200087f919062001f07565b81548110620008b7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050620009068562000f7760201b62000cc61760201c565b6200091c8562000f7760201b62000cc61760201c565b620009328462000f7760201b62000cc61760201c565b620009488662000f7760201b62000cc61760201c565b62000962856000015162000f7760201b62000cc61760201c565b6200097c866020015162000f7760201b62000cc61760201c565b62000996876040015162000f7760201b62000cc61760201c565b604051602001620009ae979695949392919062001909565b60405160208183030381529060405295505050505050919050565b606060006040518060a001604052806062815260200162005e026062913990508083604051602001620009fe9291906200187a565b604051602081830303815290604052915050919050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000008152509050600062000a8a8460405160200162000a6a919062001839565b6040516020818303038152906040526200113960201b62000e731760201c565b9050818160405160200162000aa192919062001852565b60405160208183030381529060405292505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525090508062000b2d8460405160200162000b0d9190620018af565b6040516020818303038152906040526200113960201b62000e731760201c565b60405160200162000b4092919062001852565b604051602081830303815290604052915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141562000c36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c2d9062001ac0565b60405180910390fd5b62000c478162000b5760201b60201c565b1562000c8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c819062001a5a565b60405180910390fd5b62000c9e60008383620012eb60201b60201c565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000cf0919062001c3e565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a462000db960008383620012f060201b60201c565b5050565b600062000deb8473ffffffffffffffffffffffffffffffffffffffff166200131760201b620010121760201c565b1562000f6a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0262000e1d620002fa60201b60201c565b8786866040518563ffffffff1660e01b815260040162000e419493929190620019e4565b602060405180830381600087803b15801562000e5c57600080fd5b505af192505050801562000e9057506040513d601f19601f8201168201806040525081019062000e8d919062001401565b60015b62000f19573d806000811462000ec3576040519150601f19603f3d011682016040523d82523d6000602084013e62000ec8565b606091505b5060008151141562000f11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000f089062001a38565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505062000f6f565b600190505b949350505050565b6060600082141562000fc1576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905062001134565b600082905060005b6000821462000ff957808062000fdf9062001eb9565b915050600a8262000ff1919062001c9b565b915062000fc9565b60008167ffffffffffffffff8111156200103c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156200106f5781602001600182028036833780820191505090505b5090505b600085146200112d576001826200108b919062001d34565b9150600a856200109c919062001f07565b6030620010aa919062001c3e565b60f81b818381518110620010e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8562001125919062001c9b565b945062001073565b8093505050505b919050565b60606000825114156200115e57604051806020016040528060008152509050620012e6565b600060405180606001604052806040815260200162005dc2604091399050600060036002855162001190919062001c3e565b6200119c919062001c9b565b6004620011aa919062001cd3565b90506000602082620011bd919062001c3e565b67ffffffffffffffff811115620011fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015620012305781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015620012a1576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182536001820191505062001244565b600389510660018114620012be5760028114620012cf57620012da565b613d3d60f01b6002830352620012da565b603d60f81b60018303525b50505050508093505050505b919050565b505050565b620013126000620013066200042b60201b60201c565b6200056560201b60201c565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054620013489062001e83565b90600052602060002090601f0160209004810192826200136c5760008555620013b8565b82601f106200138757805160ff1916838001178555620013b8565b82800160010185558215620013b8579182015b82811115620013b75782518255916020019190600101906200139a565b5b509050620013c79190620013cb565b5090565b5b80821115620013e6576000816000905550600101620013cc565b5090565b600081519050620013fb816200237d565b92915050565b6000602082840312156200141457600080fd5b60006200142484828501620013ea565b91505092915050565b620014388162001d6f565b82525050565b60006200144b8262001bf0565b62001457818562001c06565b93506200146981856020860162001e4d565b620014748162001fcc565b840191505092915050565b60006200148c8262001bf0565b62001498818562001c17565b9350620014aa81856020860162001e4d565b80840191505092915050565b620014c18162001de9565b82525050565b620014d28162001dfd565b82525050565b620014e38162001e11565b82525050565b620014f48162001e25565b82525050565b620015058162001e39565b82525050565b6000620015188262001bfb565b62001524818562001c33565b93506200153681856020860162001e4d565b80840191505092915050565b60006200155160328362001c22565b91506200155e8262001fdd565b604082019050919050565b600062001578601c8362001c22565b915062001585826200202c565b602082019050919050565b60006200159f60018362001c33565b9150620015ac8262002055565b600182019050919050565b6000620015c6600a8362001c33565b9150620015d3826200207e565b600a82019050919050565b6000620015ed601f8362001c33565b9150620015fa82620020a7565b601f82019050919050565b60006200161460298362001c22565b91506200162182620020d0565b604082019050919050565b60006200163b602e8362001c22565b915062001648826200211f565b604082019050919050565b60006200166260028362001c33565b91506200166f826200216e565b600282019050919050565b60006200168960208362001c22565b9150620016968262002197565b602082019050919050565b6000620016b060098362001c33565b9150620016bd82620021c0565b600982019050919050565b6000620016d760128362001c33565b9150620016e482620021e9565b601282019050919050565b6000620016fe60058362001c33565b91506200170b8262002212565b600582019050919050565b600062001725600d8362001c33565b915062001732826200223b565b600d82019050919050565b60006200174c600a8362001c33565b9150620017598262002264565b600a82019050919050565b60006200177360098362001c33565b915062001780826200228d565b600982019050919050565b60006200179a60068362001c33565b9150620017a782620022b6565b600682019050919050565b6000620017c160098362001c33565b9150620017ce82620022df565b600982019050919050565b6000620017e860548362001c33565b9150620017f58262002308565b605482019050919050565b6200180b8162001dcf565b82525050565b60006200181f82856200147f565b91506200182d82846200150b565b91508190509392505050565b60006200184782846200150b565b915081905092915050565b60006200186082856200150b565b91506200186e82846200150b565b91508190509392505050565b60006200188882856200150b565b91506200189682846200150b565b9150620018a3826200178b565b91508190509392505050565b6000620018bc82620015de565b9150620018c982620017d9565b9150620018d682620016c8565b9150620018e3826200173d565b9150620018f182846200150b565b9150620018fe8262001653565b915081905092915050565b6000620019168262001764565b915062001924828a6200150b565b91506200193182620016ef565b91506200193f82896200150b565b91506200194c82620017b2565b91506200195a82886200150b565b91506200196782620015b7565b91506200197582876200150b565b9150620019828262001716565b91506200199082866200150b565b91506200199d8262001590565b9150620019ab82856200150b565b9150620019b88262001590565b9150620019c682846200150b565b9150620019d382620016a1565b915081905098975050505050505050565b6000608082019050620019fb60008301876200142d565b62001a0a60208301866200142d565b62001a19604083018562001800565b818103606083015262001a2d81846200143e565b905095945050505050565b6000602082019050818103600083015262001a538162001542565b9050919050565b6000602082019050818103600083015262001a758162001569565b9050919050565b6000602082019050818103600083015262001a978162001605565b9050919050565b6000602082019050818103600083015262001ab9816200162c565b9050919050565b6000602082019050818103600083015262001adb816200167a565b9050919050565b600060408201905062001af9600083018562001800565b62001b086020830184620014b6565b9392505050565b600060408201905062001b26600083018562001800565b62001b356020830184620014c7565b9392505050565b600060408201905062001b53600083018562001800565b62001b626020830184620014d8565b9392505050565b600060408201905062001b80600083018562001800565b62001b8f6020830184620014e9565b9392505050565b600060408201905062001bad600083018562001800565b62001bbc6020830184620014fa565b9392505050565b600060408201905062001bda600083018562001800565b62001be9602083018462001800565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600062001c4b8262001dcf565b915062001c588362001dcf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562001c905762001c8f62001f3f565b5b828201905092915050565b600062001ca88262001dcf565b915062001cb58362001dcf565b92508262001cc85762001cc762001f6e565b5b828204905092915050565b600062001ce08262001dcf565b915062001ced8362001dcf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562001d295762001d2862001f3f565b5b828202905092915050565b600062001d418262001dcf565b915062001d4e8362001dcf565b92508282101562001d645762001d6362001f3f565b5b828203905092915050565b600062001d7c8262001daf565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600062001df68262001dd9565b9050919050565b600062001e0a8262001dd9565b9050919050565b600062001e1e8262001dd9565b9050919050565b600062001e328262001dd9565b9050919050565b600062001e468262001dd9565b9050919050565b60005b8381101562001e6d57808201518184015260208101905062001e50565b8381111562001e7d576000848401525b50505050565b6000600282049050600182168062001e9c57607f821691505b6020821081141562001eb35762001eb262001f9d565b5b50919050565b600062001ec68262001dcf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001efc5762001efb62001f3f565b5b600182019050919050565b600062001f148262001dcf565b915062001f218362001dcf565b92508262001f345762001f3362001f6e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f7b226e616d65223a2254686520736f756c206f662077616c6c657473222c2000600082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f2c302e342922202f3e0000000000000000000000000000000000000000000000600082015250565b7f2261747472696275746573223a2022222c200000000000000000000000000000600082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f222066696c6c3d22726762612800000000000000000000000000000000000000600082015250565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b7f3c7265637420783d220000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202254686520696d616765206f662074686960008201527f73204e465420766172696573206163636f7264696e6720746f2074686520736f60208201527f756c206f6620796f75722077616c6c6574222c20000000000000000000000000604082015250565b620023888162001d83565b81146200239457600080fd5b50565b613a1b80620023a76000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063b88d4fde11610066578063b88d4fde14610299578063c87b56dd146102b5578063e985e9c5146102e5578063f2fde38b1461031557610100565b8063715018a6146102375780638da5cb5b1461024157806395d89b411461025f578063a22cb4651461027d57610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d757806370a082311461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190612253565b610331565b60405161012c9190612a11565b60405180910390f35b61013d610413565b60405161014a9190612a2c565b60405180910390f35b61016d600480360381019061016891906122a5565b6104a5565b60405161017a91906129aa565b60405180910390f35b61019d60048036038101906101989190612217565b61052a565b005b6101b960048036038101906101b49190612111565b610642565b005b6101d560048036038101906101d09190612111565b6106a2565b005b6101f160048036038101906101ec91906122a5565b6106c2565b6040516101fe91906129aa565b60405180910390f35b610221600480360381019061021c91906120ac565b610774565b60405161022e9190612c4e565b60405180910390f35b61023f61082c565b005b6102496108b4565b60405161025691906129aa565b60405180910390f35b6102676108de565b6040516102749190612a2c565b60405180910390f35b610297600480360381019061029291906121db565b610970565b005b6102b360048036038101906102ae9190612160565b610986565b005b6102cf60048036038101906102ca91906122a5565b6109e8565b6040516102dc9190612a2c565b60405180910390f35b6102ff60048036038101906102fa91906120d5565b610b3a565b60405161030c9190612a11565b60405180910390f35b61032f600480360381019061032a91906120ac565b610bce565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040c575061040b82611035565b5b9050919050565b60606000805461042290613038565b80601f016020809104026020016040519081016040528092919081815260200182805461044e90613038565b801561049b5780601f106104705761010080835404028352916020019161049b565b820191906000526020600020905b81548152906001019060200180831161047e57829003601f168201915b5050505050905090565b60006104b08261109f565b6104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690612bae565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610535826106c2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90612c0e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105c561110b565b73ffffffffffffffffffffffffffffffffffffffff1614806105f457506105f3816105ee61110b565b610b3a565b5b610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90612b0e565b60405180910390fd5b61063d8383611113565b505050565b61065361064d61110b565b826111cc565b610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612c2e565b60405180910390fd5b61069d8383836112aa565b505050565b6106bd83838360405180602001604052806000815250610986565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290612b4e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc90612b2e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61083461110b565b73ffffffffffffffffffffffffffffffffffffffff166108526108b4565b73ffffffffffffffffffffffffffffffffffffffff16146108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90612bce565b60405180910390fd5b6108b26000611511565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546108ed90613038565b80601f016020809104026020016040519081016040528092919081815260200182805461091990613038565b80156109665780601f1061093b57610100808354040283529160200191610966565b820191906000526020600020905b81548152906001019060200180831161094957829003601f168201915b5050505050905090565b61098261097b61110b565b83836115d7565b5050565b61099761099161110b565b836111cc565b6109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd90612c2e565b60405180910390fd5b6109e284848484611744565b50505050565b60606109f38261109f565b610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2990612b8e565b60405180910390fd5b6000600660008481526020019081526020016000208054610a5290613038565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e90613038565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b505050505090506000610adc6117a0565b9050600081511415610af2578192505050610b35565b600082511115610b27578082604051602001610b0f92919061284c565b60405160208183030381529060405292505050610b35565b610b30846117b7565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bd661110b565b73ffffffffffffffffffffffffffffffffffffffff16610bf46108b4565b73ffffffffffffffffffffffffffffffffffffffff1614610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4190612bce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190612a6e565b60405180910390fd5b610cc381611511565b50565b60606000821415610d0e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610e6e565b600082905060005b60008214610d40578080610d299061309b565b915050600a82610d399190612e59565b9150610d16565b60008167ffffffffffffffff811115610d82577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610db45781602001600182028036833780820191505090505b5090505b60008514610e6757600182610dcd9190612ee4565b9150600a85610ddc91906130e4565b6030610de89190612e03565b60f81b818381518110610e24577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610e609190612e59565b9450610db8565b8093505050505b919050565b6060600082511415610e965760405180602001604052806000815250905061100d565b60006040518060600160405280604081526020016139446040913990506000600360028551610ec59190612e03565b610ecf9190612e59565b6004610edb9190612e8a565b90506000602082610eec9190612e03565b67ffffffffffffffff811115610f2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f5d5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610fcc576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610f71565b600389510660018114610fe65760028114610ff657611001565b613d3d60f01b6002830352611001565b603d60f81b60018303525b50505050508093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611186836106c2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111d78261109f565b611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d90612aee565b60405180910390fd5b6000611221836106c2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061129057508373ffffffffffffffffffffffffffffffffffffffff16611278846104a5565b73ffffffffffffffffffffffffffffffffffffffff16145b806112a157506112a08185610b3a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112ca826106c2565b73ffffffffffffffffffffffffffffffffffffffff1614611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790612a8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138790612aae565b60405180910390fd5b61139b83838361185e565b6113a6600082611113565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113f69190612ee4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461144d9190612e03565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461150c838383611863565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d90612ace565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117379190612a11565b60405180910390a3505050565b61174f8484846112aa565b61175b8484848461187a565b61179a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179190612a4e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606117c28261109f565b611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f890612bee565b60405180910390fd5b600061180b6117a0565b9050600081511161182b5760405180602001604052806000815250611856565b8061183584610cc6565b60405160200161184692919061284c565b6040516020818303038152906040525b915050919050565b505050565b6118756000611870611a11565b611b11565b505050565b600061189b8473ffffffffffffffffffffffffffffffffffffffff16611012565b15611a04578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118c461110b565b8786866040518563ffffffff1660e01b81526004016118e694939291906129c5565b602060405180830381600087803b15801561190057600080fd5b505af192505050801561193157506040513d601f19601f8201168201806040525081019061192e919061227c565b60015b6119b4573d8060008114611961576040519150601f19603f3d011682016040523d82523d6000602084013e611966565b606091505b506000815114156119ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a390612a4e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611a09565b600190505b949350505050565b60606000611a1f60006106c2565b73ffffffffffffffffffffffffffffffffffffffff1690506000611a4282611b85565b604051602001611a529190612835565b60405160208183030381529060405290506000600190505b600954811015611ae45760008382604051602001611a89929190612d36565b6040516020818303038152906040528051906020012060001c905082611aae82611b85565b604051602001611abf929190612811565b6040516020818303038152906040529250508080611adc9061309b565b915050611a6a565b506000611af082611dcf565b90506000611afd82611e18565b9050611b0881611eab565b94505050505090565b611b1a8261109f565b611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5090612b6e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611b80929190611f38565b505050565b606060006102bc83634aa4c50f604051602001611ba3929190612c69565b6040516020818303038152906040528051906020012060001c611bc691906130e4565b905060006102bc8463017f593c604051602001611be4929190612cbb565b6040516020818303038152906040528051906020012060001c611c0791906130e4565b9050600060326101f48663140a8ae3604051602001611c27929190612ce4565b6040516020818303038152906040528051906020012060001c611c4a91906130e4565b611c549190612e03565b9050600060326101f48763031ed102604051602001611c74929190612d0d565b6040516020818303038152906040528051906020012060001c611c9791906130e4565b611ca19190612e03565b9050600060086005886301673a49604051602001611cc0929190612c92565b6040516020818303038152906040528051906020012060001c611ce391906130e4565b81548110611d1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050611d5c85610cc6565b611d6585610cc6565b611d6e84610cc6565b611d7786610cc6565b611d848560000151610cc6565b611d918660200151610cc6565b611d9e8760400151610cc6565b604051602001611db497969594939291906128ed565b60405160208183030381529060405295505050505050919050565b606060006040518060a00160405280606281526020016139846062913990508083604051602001611e01929190612870565b604051602081830303815290604052915050919050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000611e7e84604051602001611e6a9190612835565b604051602081830303815290604052610e73565b90508181604051602001611e9392919061284c565b60405160208183030381529060405292505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905080611f1084604051602001611efc919061289f565b604051602081830303815290604052610e73565b604051602001611f2192919061284c565b604051602081830303815290604052915050919050565b828054611f4490613038565b90600052602060002090601f016020900481019282611f665760008555611fad565b82601f10611f7f57805160ff1916838001178555611fad565b82800160010185558215611fad579182015b82811115611fac578251825591602001919060010190611f91565b5b509050611fba9190611fbe565b5090565b5b80821115611fd7576000816000905550600101611fbf565b5090565b6000611fee611fe984612d84565b612d5f565b90508281526020810184848401111561200657600080fd5b612011848285612ff6565b509392505050565b600081359050612028816138e7565b92915050565b60008135905061203d816138fe565b92915050565b60008135905061205281613915565b92915050565b60008151905061206781613915565b92915050565b600082601f83011261207e57600080fd5b813561208e848260208601611fdb565b91505092915050565b6000813590506120a68161392c565b92915050565b6000602082840312156120be57600080fd5b60006120cc84828501612019565b91505092915050565b600080604083850312156120e857600080fd5b60006120f685828601612019565b925050602061210785828601612019565b9150509250929050565b60008060006060848603121561212657600080fd5b600061213486828701612019565b935050602061214586828701612019565b925050604061215686828701612097565b9150509250925092565b6000806000806080858703121561217657600080fd5b600061218487828801612019565b945050602061219587828801612019565b93505060406121a687828801612097565b925050606085013567ffffffffffffffff8111156121c357600080fd5b6121cf8782880161206d565b91505092959194509250565b600080604083850312156121ee57600080fd5b60006121fc85828601612019565b925050602061220d8582860161202e565b9150509250929050565b6000806040838503121561222a57600080fd5b600061223885828601612019565b925050602061224985828601612097565b9150509250929050565b60006020828403121561226557600080fd5b600061227384828501612043565b91505092915050565b60006020828403121561228e57600080fd5b600061229c84828501612058565b91505092915050565b6000602082840312156122b757600080fd5b60006122c584828501612097565b91505092915050565b6122d781612f18565b82525050565b6122e681612f2a565b82525050565b60006122f782612db5565b6123018185612dcb565b9350612311818560208601613005565b61231a816131d1565b840191505092915050565b600061233082612db5565b61233a8185612ddc565b935061234a818560208601613005565b80840191505092915050565b61235f81612f9c565b82525050565b61236e81612fae565b82525050565b61237d81612fc0565b82525050565b61238c81612fd2565b82525050565b61239b81612fe4565b82525050565b60006123ac82612dc0565b6123b68185612de7565b93506123c6818560208601613005565b6123cf816131d1565b840191505092915050565b60006123e582612dc0565b6123ef8185612df8565b93506123ff818560208601613005565b80840191505092915050565b6000612418603283612de7565b9150612423826131e2565b604082019050919050565b600061243b602683612de7565b915061244682613231565b604082019050919050565b600061245e602583612de7565b915061246982613280565b604082019050919050565b6000612481600183612df8565b915061248c826132cf565b600182019050919050565b60006124a4602483612de7565b91506124af826132f8565b604082019050919050565b60006124c7600a83612df8565b91506124d282613347565b600a82019050919050565b60006124ea601983612de7565b91506124f582613370565b602082019050919050565b600061250d601f83612df8565b915061251882613399565b601f82019050919050565b6000612530602c83612de7565b915061253b826133c2565b604082019050919050565b6000612553603883612de7565b915061255e82613411565b604082019050919050565b6000612576602a83612de7565b915061258182613460565b604082019050919050565b6000612599602983612de7565b91506125a4826134af565b604082019050919050565b60006125bc602e83612de7565b91506125c7826134fe565b604082019050919050565b60006125df600283612df8565b91506125ea8261354d565b600282019050919050565b6000612602603183612de7565b915061260d82613576565b604082019050919050565b6000612625602c83612de7565b9150612630826135c5565b604082019050919050565b6000612648602083612de7565b915061265382613614565b602082019050919050565b600061266b600983612df8565b91506126768261363d565b600982019050919050565b600061268e602f83612de7565b915061269982613666565b604082019050919050565b60006126b1601283612df8565b91506126bc826136b5565b601282019050919050565b60006126d4602183612de7565b91506126df826136de565b604082019050919050565b60006126f7600583612df8565b91506127028261372d565b600582019050919050565b600061271a603183612de7565b915061272582613756565b604082019050919050565b600061273d600d83612df8565b9150612748826137a5565b600d82019050919050565b6000612760600a83612df8565b915061276b826137ce565b600a82019050919050565b6000612783600983612df8565b915061278e826137f7565b600982019050919050565b60006127a6600683612df8565b91506127b182613820565b600682019050919050565b60006127c9600983612df8565b91506127d482613849565b600982019050919050565b60006127ec605483612df8565b91506127f782613872565b605482019050919050565b61280b81612f82565b82525050565b600061281d8285612325565b915061282982846123da565b91508190509392505050565b600061284182846123da565b915081905092915050565b600061285882856123da565b915061286482846123da565b91508190509392505050565b600061287c82856123da565b915061288882846123da565b915061289382612799565b91508190509392505050565b60006128aa82612500565b91506128b5826127df565b91506128c0826126a4565b91506128cb82612753565b91506128d782846123da565b91506128e2826125d2565b915081905092915050565b60006128f882612776565b9150612904828a6123da565b915061290f826126ea565b915061291b82896123da565b9150612926826127bc565b915061293282886123da565b915061293d826124ba565b915061294982876123da565b915061295482612730565b915061296082866123da565b915061296b82612474565b915061297782856123da565b915061298282612474565b915061298e82846123da565b91506129998261265e565b915081905098975050505050505050565b60006020820190506129bf60008301846122ce565b92915050565b60006080820190506129da60008301876122ce565b6129e760208301866122ce565b6129f46040830185612802565b8181036060830152612a0681846122ec565b905095945050505050565b6000602082019050612a2660008301846122dd565b92915050565b60006020820190508181036000830152612a4681846123a1565b905092915050565b60006020820190508181036000830152612a678161240b565b9050919050565b60006020820190508181036000830152612a878161242e565b9050919050565b60006020820190508181036000830152612aa781612451565b9050919050565b60006020820190508181036000830152612ac781612497565b9050919050565b60006020820190508181036000830152612ae7816124dd565b9050919050565b60006020820190508181036000830152612b0781612523565b9050919050565b60006020820190508181036000830152612b2781612546565b9050919050565b60006020820190508181036000830152612b4781612569565b9050919050565b60006020820190508181036000830152612b678161258c565b9050919050565b60006020820190508181036000830152612b87816125af565b9050919050565b60006020820190508181036000830152612ba7816125f5565b9050919050565b60006020820190508181036000830152612bc781612618565b9050919050565b60006020820190508181036000830152612be78161263b565b9050919050565b60006020820190508181036000830152612c0781612681565b9050919050565b60006020820190508181036000830152612c27816126c7565b9050919050565b60006020820190508181036000830152612c478161270d565b9050919050565b6000602082019050612c636000830184612802565b92915050565b6000604082019050612c7e6000830185612802565b612c8b6020830184612356565b9392505050565b6000604082019050612ca76000830185612802565b612cb46020830184612365565b9392505050565b6000604082019050612cd06000830185612802565b612cdd6020830184612374565b9392505050565b6000604082019050612cf96000830185612802565b612d066020830184612383565b9392505050565b6000604082019050612d226000830185612802565b612d2f6020830184612392565b9392505050565b6000604082019050612d4b6000830185612802565b612d586020830184612802565b9392505050565b6000612d69612d7a565b9050612d75828261306a565b919050565b6000604051905090565b600067ffffffffffffffff821115612d9f57612d9e6131a2565b5b612da8826131d1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e0e82612f82565b9150612e1983612f82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4e57612e4d613115565b5b828201905092915050565b6000612e6482612f82565b9150612e6f83612f82565b925082612e7f57612e7e613144565b5b828204905092915050565b6000612e9582612f82565b9150612ea083612f82565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ed957612ed8613115565b5b828202905092915050565b6000612eef82612f82565b9150612efa83612f82565b925082821015612f0d57612f0c613115565b5b828203905092915050565b6000612f2382612f62565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000612fa782612f8c565b9050919050565b6000612fb982612f8c565b9050919050565b6000612fcb82612f8c565b9050919050565b6000612fdd82612f8c565b9050919050565b6000612fef82612f8c565b9050919050565b82818337600083830152505050565b60005b83811015613023578082015181840152602081019050613008565b83811115613032576000848401525b50505050565b6000600282049050600182168061305057607f821691505b6020821081141561306457613063613173565b5b50919050565b613073826131d1565b810181811067ffffffffffffffff82111715613092576130916131a2565b5b80604052505050565b60006130a682612f82565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130d9576130d8613115565b5b600182019050919050565b60006130ef82612f82565b91506130fa83612f82565b92508261310a57613109613144565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f7b226e616d65223a2254686520736f756c206f662077616c6c657473222c2000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f2c302e342922202f3e0000000000000000000000000000000000000000000000600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f2261747472696275746573223a2022222c200000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f222066696c6c3d22726762612800000000000000000000000000000000000000600082015250565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b7f3c7265637420783d220000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202254686520696d616765206f662074686960008201527f73204e465420766172696573206163636f7264696e6720746f2074686520736f60208201527f756c206f6620796f75722077616c6c6574222c20000000000000000000000000604082015250565b6138f081612f18565b81146138fb57600080fd5b50565b61390781612f2a565b811461391257600080fd5b50565b61391e81612f36565b811461392957600080fd5b50565b61393581612f82565b811461394057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207374796c653d226261636b67726f756e642d636f6c6f723a7768697465222077696474683d223130303022206865696768743d2231303030223ea26469706673582212208d8cdf28121d5209e46edca84e2ffc7196e0aee36a14d1a971212facd3883a0e64736f6c634300080400334142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207374796c653d226261636b67726f756e642d636f6c6f723a7768697465222077696474683d223130303022206865696768743d2231303030223e",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063b88d4fde11610066578063b88d4fde14610299578063c87b56dd146102b5578063e985e9c5146102e5578063f2fde38b1461031557610100565b8063715018a6146102375780638da5cb5b1461024157806395d89b411461025f578063a22cb4651461027d57610100565b806323b872dd116100d357806323b872dd1461019f57806342842e0e146101bb5780636352211e146101d757806370a082311461020757610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190612253565b610331565b60405161012c9190612a11565b60405180910390f35b61013d610413565b60405161014a9190612a2c565b60405180910390f35b61016d600480360381019061016891906122a5565b6104a5565b60405161017a91906129aa565b60405180910390f35b61019d60048036038101906101989190612217565b61052a565b005b6101b960048036038101906101b49190612111565b610642565b005b6101d560048036038101906101d09190612111565b6106a2565b005b6101f160048036038101906101ec91906122a5565b6106c2565b6040516101fe91906129aa565b60405180910390f35b610221600480360381019061021c91906120ac565b610774565b60405161022e9190612c4e565b60405180910390f35b61023f61082c565b005b6102496108b4565b60405161025691906129aa565b60405180910390f35b6102676108de565b6040516102749190612a2c565b60405180910390f35b610297600480360381019061029291906121db565b610970565b005b6102b360048036038101906102ae9190612160565b610986565b005b6102cf60048036038101906102ca91906122a5565b6109e8565b6040516102dc9190612a2c565b60405180910390f35b6102ff60048036038101906102fa91906120d5565b610b3a565b60405161030c9190612a11565b60405180910390f35b61032f600480360381019061032a91906120ac565b610bce565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806103fc57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061040c575061040b82611035565b5b9050919050565b60606000805461042290613038565b80601f016020809104026020016040519081016040528092919081815260200182805461044e90613038565b801561049b5780601f106104705761010080835404028352916020019161049b565b820191906000526020600020905b81548152906001019060200180831161047e57829003601f168201915b5050505050905090565b60006104b08261109f565b6104ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e690612bae565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610535826106c2565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059d90612c0e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166105c561110b565b73ffffffffffffffffffffffffffffffffffffffff1614806105f457506105f3816105ee61110b565b610b3a565b5b610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90612b0e565b60405180910390fd5b61063d8383611113565b505050565b61065361064d61110b565b826111cc565b610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068990612c2e565b60405180910390fd5b61069d8383836112aa565b505050565b6106bd83838360405180602001604052806000815250610986565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561076b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076290612b4e565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107dc90612b2e565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61083461110b565b73ffffffffffffffffffffffffffffffffffffffff166108526108b4565b73ffffffffffffffffffffffffffffffffffffffff16146108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90612bce565b60405180910390fd5b6108b26000611511565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546108ed90613038565b80601f016020809104026020016040519081016040528092919081815260200182805461091990613038565b80156109665780601f1061093b57610100808354040283529160200191610966565b820191906000526020600020905b81548152906001019060200180831161094957829003601f168201915b5050505050905090565b61098261097b61110b565b83836115d7565b5050565b61099761099161110b565b836111cc565b6109d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cd90612c2e565b60405180910390fd5b6109e284848484611744565b50505050565b60606109f38261109f565b610a32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2990612b8e565b60405180910390fd5b6000600660008481526020019081526020016000208054610a5290613038565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7e90613038565b8015610acb5780601f10610aa057610100808354040283529160200191610acb565b820191906000526020600020905b815481529060010190602001808311610aae57829003601f168201915b505050505090506000610adc6117a0565b9050600081511415610af2578192505050610b35565b600082511115610b27578082604051602001610b0f92919061284c565b60405160208183030381529060405292505050610b35565b610b30846117b7565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610bd661110b565b73ffffffffffffffffffffffffffffffffffffffff16610bf46108b4565b73ffffffffffffffffffffffffffffffffffffffff1614610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4190612bce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb190612a6e565b60405180910390fd5b610cc381611511565b50565b60606000821415610d0e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610e6e565b600082905060005b60008214610d40578080610d299061309b565b915050600a82610d399190612e59565b9150610d16565b60008167ffffffffffffffff811115610d82577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610db45781602001600182028036833780820191505090505b5090505b60008514610e6757600182610dcd9190612ee4565b9150600a85610ddc91906130e4565b6030610de89190612e03565b60f81b818381518110610e24577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610e609190612e59565b9450610db8565b8093505050505b919050565b6060600082511415610e965760405180602001604052806000815250905061100d565b60006040518060600160405280604081526020016139446040913990506000600360028551610ec59190612e03565b610ecf9190612e59565b6004610edb9190612e8a565b90506000602082610eec9190612e03565b67ffffffffffffffff811115610f2b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610f5d5781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610fcc576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050610f71565b600389510660018114610fe65760028114610ff657611001565b613d3d60f01b6002830352611001565b603d60f81b60018303525b50505050508093505050505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611186836106c2565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006111d78261109f565b611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120d90612aee565b60405180910390fd5b6000611221836106c2565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061129057508373ffffffffffffffffffffffffffffffffffffffff16611278846104a5565b73ffffffffffffffffffffffffffffffffffffffff16145b806112a157506112a08185610b3a565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112ca826106c2565b73ffffffffffffffffffffffffffffffffffffffff1614611320576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131790612a8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138790612aae565b60405180910390fd5b61139b83838361185e565b6113a6600082611113565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113f69190612ee4565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461144d9190612e03565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461150c838383611863565b505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163d90612ace565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117379190612a11565b60405180910390a3505050565b61174f8484846112aa565b61175b8484848461187a565b61179a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179190612a4e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606117c28261109f565b611801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f890612bee565b60405180910390fd5b600061180b6117a0565b9050600081511161182b5760405180602001604052806000815250611856565b8061183584610cc6565b60405160200161184692919061284c565b6040516020818303038152906040525b915050919050565b505050565b6118756000611870611a11565b611b11565b505050565b600061189b8473ffffffffffffffffffffffffffffffffffffffff16611012565b15611a04578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026118c461110b565b8786866040518563ffffffff1660e01b81526004016118e694939291906129c5565b602060405180830381600087803b15801561190057600080fd5b505af192505050801561193157506040513d601f19601f8201168201806040525081019061192e919061227c565b60015b6119b4573d8060008114611961576040519150601f19603f3d011682016040523d82523d6000602084013e611966565b606091505b506000815114156119ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a390612a4e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611a09565b600190505b949350505050565b60606000611a1f60006106c2565b73ffffffffffffffffffffffffffffffffffffffff1690506000611a4282611b85565b604051602001611a529190612835565b60405160208183030381529060405290506000600190505b600954811015611ae45760008382604051602001611a89929190612d36565b6040516020818303038152906040528051906020012060001c905082611aae82611b85565b604051602001611abf929190612811565b6040516020818303038152906040529250508080611adc9061309b565b915050611a6a565b506000611af082611dcf565b90506000611afd82611e18565b9050611b0881611eab565b94505050505090565b611b1a8261109f565b611b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5090612b6e565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611b80929190611f38565b505050565b606060006102bc83634aa4c50f604051602001611ba3929190612c69565b6040516020818303038152906040528051906020012060001c611bc691906130e4565b905060006102bc8463017f593c604051602001611be4929190612cbb565b6040516020818303038152906040528051906020012060001c611c0791906130e4565b9050600060326101f48663140a8ae3604051602001611c27929190612ce4565b6040516020818303038152906040528051906020012060001c611c4a91906130e4565b611c549190612e03565b9050600060326101f48763031ed102604051602001611c74929190612d0d565b6040516020818303038152906040528051906020012060001c611c9791906130e4565b611ca19190612e03565b9050600060086005886301673a49604051602001611cc0929190612c92565b6040516020818303038152906040528051906020012060001c611ce391906130e4565b81548110611d1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050611d5c85610cc6565b611d6585610cc6565b611d6e84610cc6565b611d7786610cc6565b611d848560000151610cc6565b611d918660200151610cc6565b611d9e8760400151610cc6565b604051602001611db497969594939291906128ed565b60405160208183030381529060405295505050505050919050565b606060006040518060a00160405280606281526020016139846062913990508083604051602001611e01929190612870565b604051602081830303815290604052915050919050565b606060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525090506000611e7e84604051602001611e6a9190612835565b604051602081830303815290604052610e73565b90508181604051602001611e9392919061284c565b60405160208183030381529060405292505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250905080611f1084604051602001611efc919061289f565b604051602081830303815290604052610e73565b604051602001611f2192919061284c565b604051602081830303815290604052915050919050565b828054611f4490613038565b90600052602060002090601f016020900481019282611f665760008555611fad565b82601f10611f7f57805160ff1916838001178555611fad565b82800160010185558215611fad579182015b82811115611fac578251825591602001919060010190611f91565b5b509050611fba9190611fbe565b5090565b5b80821115611fd7576000816000905550600101611fbf565b5090565b6000611fee611fe984612d84565b612d5f565b90508281526020810184848401111561200657600080fd5b612011848285612ff6565b509392505050565b600081359050612028816138e7565b92915050565b60008135905061203d816138fe565b92915050565b60008135905061205281613915565b92915050565b60008151905061206781613915565b92915050565b600082601f83011261207e57600080fd5b813561208e848260208601611fdb565b91505092915050565b6000813590506120a68161392c565b92915050565b6000602082840312156120be57600080fd5b60006120cc84828501612019565b91505092915050565b600080604083850312156120e857600080fd5b60006120f685828601612019565b925050602061210785828601612019565b9150509250929050565b60008060006060848603121561212657600080fd5b600061213486828701612019565b935050602061214586828701612019565b925050604061215686828701612097565b9150509250925092565b6000806000806080858703121561217657600080fd5b600061218487828801612019565b945050602061219587828801612019565b93505060406121a687828801612097565b925050606085013567ffffffffffffffff8111156121c357600080fd5b6121cf8782880161206d565b91505092959194509250565b600080604083850312156121ee57600080fd5b60006121fc85828601612019565b925050602061220d8582860161202e565b9150509250929050565b6000806040838503121561222a57600080fd5b600061223885828601612019565b925050602061224985828601612097565b9150509250929050565b60006020828403121561226557600080fd5b600061227384828501612043565b91505092915050565b60006020828403121561228e57600080fd5b600061229c84828501612058565b91505092915050565b6000602082840312156122b757600080fd5b60006122c584828501612097565b91505092915050565b6122d781612f18565b82525050565b6122e681612f2a565b82525050565b60006122f782612db5565b6123018185612dcb565b9350612311818560208601613005565b61231a816131d1565b840191505092915050565b600061233082612db5565b61233a8185612ddc565b935061234a818560208601613005565b80840191505092915050565b61235f81612f9c565b82525050565b61236e81612fae565b82525050565b61237d81612fc0565b82525050565b61238c81612fd2565b82525050565b61239b81612fe4565b82525050565b60006123ac82612dc0565b6123b68185612de7565b93506123c6818560208601613005565b6123cf816131d1565b840191505092915050565b60006123e582612dc0565b6123ef8185612df8565b93506123ff818560208601613005565b80840191505092915050565b6000612418603283612de7565b9150612423826131e2565b604082019050919050565b600061243b602683612de7565b915061244682613231565b604082019050919050565b600061245e602583612de7565b915061246982613280565b604082019050919050565b6000612481600183612df8565b915061248c826132cf565b600182019050919050565b60006124a4602483612de7565b91506124af826132f8565b604082019050919050565b60006124c7600a83612df8565b91506124d282613347565b600a82019050919050565b60006124ea601983612de7565b91506124f582613370565b602082019050919050565b600061250d601f83612df8565b915061251882613399565b601f82019050919050565b6000612530602c83612de7565b915061253b826133c2565b604082019050919050565b6000612553603883612de7565b915061255e82613411565b604082019050919050565b6000612576602a83612de7565b915061258182613460565b604082019050919050565b6000612599602983612de7565b91506125a4826134af565b604082019050919050565b60006125bc602e83612de7565b91506125c7826134fe565b604082019050919050565b60006125df600283612df8565b91506125ea8261354d565b600282019050919050565b6000612602603183612de7565b915061260d82613576565b604082019050919050565b6000612625602c83612de7565b9150612630826135c5565b604082019050919050565b6000612648602083612de7565b915061265382613614565b602082019050919050565b600061266b600983612df8565b91506126768261363d565b600982019050919050565b600061268e602f83612de7565b915061269982613666565b604082019050919050565b60006126b1601283612df8565b91506126bc826136b5565b601282019050919050565b60006126d4602183612de7565b91506126df826136de565b604082019050919050565b60006126f7600583612df8565b91506127028261372d565b600582019050919050565b600061271a603183612de7565b915061272582613756565b604082019050919050565b600061273d600d83612df8565b9150612748826137a5565b600d82019050919050565b6000612760600a83612df8565b915061276b826137ce565b600a82019050919050565b6000612783600983612df8565b915061278e826137f7565b600982019050919050565b60006127a6600683612df8565b91506127b182613820565b600682019050919050565b60006127c9600983612df8565b91506127d482613849565b600982019050919050565b60006127ec605483612df8565b91506127f782613872565b605482019050919050565b61280b81612f82565b82525050565b600061281d8285612325565b915061282982846123da565b91508190509392505050565b600061284182846123da565b915081905092915050565b600061285882856123da565b915061286482846123da565b91508190509392505050565b600061287c82856123da565b915061288882846123da565b915061289382612799565b91508190509392505050565b60006128aa82612500565b91506128b5826127df565b91506128c0826126a4565b91506128cb82612753565b91506128d782846123da565b91506128e2826125d2565b915081905092915050565b60006128f882612776565b9150612904828a6123da565b915061290f826126ea565b915061291b82896123da565b9150612926826127bc565b915061293282886123da565b915061293d826124ba565b915061294982876123da565b915061295482612730565b915061296082866123da565b915061296b82612474565b915061297782856123da565b915061298282612474565b915061298e82846123da565b91506129998261265e565b915081905098975050505050505050565b60006020820190506129bf60008301846122ce565b92915050565b60006080820190506129da60008301876122ce565b6129e760208301866122ce565b6129f46040830185612802565b8181036060830152612a0681846122ec565b905095945050505050565b6000602082019050612a2660008301846122dd565b92915050565b60006020820190508181036000830152612a4681846123a1565b905092915050565b60006020820190508181036000830152612a678161240b565b9050919050565b60006020820190508181036000830152612a878161242e565b9050919050565b60006020820190508181036000830152612aa781612451565b9050919050565b60006020820190508181036000830152612ac781612497565b9050919050565b60006020820190508181036000830152612ae7816124dd565b9050919050565b60006020820190508181036000830152612b0781612523565b9050919050565b60006020820190508181036000830152612b2781612546565b9050919050565b60006020820190508181036000830152612b4781612569565b9050919050565b60006020820190508181036000830152612b678161258c565b9050919050565b60006020820190508181036000830152612b87816125af565b9050919050565b60006020820190508181036000830152612ba7816125f5565b9050919050565b60006020820190508181036000830152612bc781612618565b9050919050565b60006020820190508181036000830152612be78161263b565b9050919050565b60006020820190508181036000830152612c0781612681565b9050919050565b60006020820190508181036000830152612c27816126c7565b9050919050565b60006020820190508181036000830152612c478161270d565b9050919050565b6000602082019050612c636000830184612802565b92915050565b6000604082019050612c7e6000830185612802565b612c8b6020830184612356565b9392505050565b6000604082019050612ca76000830185612802565b612cb46020830184612365565b9392505050565b6000604082019050612cd06000830185612802565b612cdd6020830184612374565b9392505050565b6000604082019050612cf96000830185612802565b612d066020830184612383565b9392505050565b6000604082019050612d226000830185612802565b612d2f6020830184612392565b9392505050565b6000604082019050612d4b6000830185612802565b612d586020830184612802565b9392505050565b6000612d69612d7a565b9050612d75828261306a565b919050565b6000604051905090565b600067ffffffffffffffff821115612d9f57612d9e6131a2565b5b612da8826131d1565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612e0e82612f82565b9150612e1983612f82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612e4e57612e4d613115565b5b828201905092915050565b6000612e6482612f82565b9150612e6f83612f82565b925082612e7f57612e7e613144565b5b828204905092915050565b6000612e9582612f82565b9150612ea083612f82565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ed957612ed8613115565b5b828202905092915050565b6000612eef82612f82565b9150612efa83612f82565b925082821015612f0d57612f0c613115565b5b828203905092915050565b6000612f2382612f62565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b6000612fa782612f8c565b9050919050565b6000612fb982612f8c565b9050919050565b6000612fcb82612f8c565b9050919050565b6000612fdd82612f8c565b9050919050565b6000612fef82612f8c565b9050919050565b82818337600083830152505050565b60005b83811015613023578082015181840152602081019050613008565b83811115613032576000848401525b50505050565b6000600282049050600182168061305057607f821691505b6020821081141561306457613063613173565b5b50919050565b613073826131d1565b810181811067ffffffffffffffff82111715613092576130916131a2565b5b80604052505050565b60006130a682612f82565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130d9576130d8613115565b5b600182019050919050565b60006130ef82612f82565b91506130fa83612f82565b92508261310a57613109613144565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f2c00000000000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f22206865696768743d2200000000000000000000000000000000000000000000600082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f7b226e616d65223a2254686520736f756c206f662077616c6c657473222c2000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f2c302e342922202f3e0000000000000000000000000000000000000000000000600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f2261747472696275746573223a2022222c200000000000000000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f2220793d22000000000000000000000000000000000000000000000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f222066696c6c3d22726762612800000000000000000000000000000000000000600082015250565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b7f3c7265637420783d220000000000000000000000000000000000000000000000600082015250565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b7f222077696474683d220000000000000000000000000000000000000000000000600082015250565b7f226465736372697074696f6e223a202254686520696d616765206f662074686960008201527f73204e465420766172696573206163636f7264696e6720746f2074686520736f60208201527f756c206f6620796f75722077616c6c6574222c20000000000000000000000000604082015250565b6138f081612f18565b81146138fb57600080fd5b50565b61390781612f2a565b811461391257600080fd5b50565b61391e81612f36565b811461392957600080fd5b50565b61393581612f82565b811461394057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207374796c653d226261636b67726f756e642d636f6c6f723a7768697465222077696474683d223130303022206865696768743d2231303030223ea26469706673582212208d8cdf28121d5209e46edca84e2ffc7196e0aee36a14d1a971212facd3883a0e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1117,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1951,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "colors",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Color)1947_storage)dyn_storage"
      },
      {
        "astId": 1954,
        "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
        "label": "numberOfMeshes",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Color)1947_storage)dyn_storage": {
        "base": "t_struct(Color)1947_storage",
        "encoding": "dynamic_array",
        "label": "struct self_updating_NFT_enhanced.Color[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Color)1947_storage": {
        "encoding": "inplace",
        "label": "struct self_updating_NFT_enhanced.Color",
        "members": [
          {
            "astId": 1942,
            "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
            "label": "red",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1944,
            "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
            "label": "green",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1946,
            "contract": "contracts/self_updating_NFT_enhanced.sol:self_updating_NFT_enhanced",
            "label": "blue",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}